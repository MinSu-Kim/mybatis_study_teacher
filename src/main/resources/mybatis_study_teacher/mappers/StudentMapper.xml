<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis_study_teacher.mappers.StudentMapper">
    <!-- result map -->
	<resultMap type="Student" id="stdResult">
		<id column="stud_id" property="studId" />
		<result column="f" property="phone.countryCode" />
		<result column="m" property="phone.stateCode" />
		<result column="l" property="phone.number" />
	</resultMap>

    <resultMap id="StudentResult" type="Student">
        <id property="studId" column="stud_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="dob" column="dob"/>
    </resultMap>
    
<!--  
	<resultMap id="StudentWithAddressResultFull" type="Student">
        <id property="studId" column="stud_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="dob" column="dob"/>
        <result property="address.addrId" column="addr_id"/>
        <result property="address.street" column="street"/>
        <result property="address.city" column="city"/>
        <result property="address.state" column="state"/>
        <result property="address.zip" column="zip"/>
        <result property="address.country" column="country"/>
    </resultMap>
-->

	<resultMap id="StudentWithAddressResult" type="Student" extends="StudentResult">
        <result property="address.addrId" column="addr_id"/>
        <result property="address.street" column="street"/>
        <result property="address.city" column="city"/>
        <result property="address.state" column="state"/>
        <result property="address.zip" column="zip"/>
        <result property="address.country" column="country"/>
    </resultMap>
    
	<!-- 내포된 결과매핑(ResultMap)을 사용한 일대일 매핑 -->
	<resultMap id="StudentAssociation" type="Student" extends="StudentResult">
		<association property="address" resultMap="mybatis_study_teacher.mappers.AddressMapper.AddressResult"/>
	</resultMap>
    
	<resultMap type="Student" id="StudentGenderResult"  extends="StudentResult">
        <result property="gender" column="gender" />
    </resultMap>
    
	<sql id="selectSQL">
		select stud_id, name, email, phone, dob from students
	</sql>
	
	<sql id="whereSQL">
		<where>
			<if test="studId != null">
				stud_id = #{studId}
			</if>
		</where>
	</sql>
	
	<!-- select -->
	<select id="selectAllStudentByMap" parameterType="map" resultMap="StudentGenderResult">
        select stud_id, name, email, phone, dob, gender from students
        <where>
            <if test="name != null">
                name = #{name}
            </if>
            <if test="email != null">
                AND email = #{email}
            </if>
        </where>
    </select>
	
	
	<select id="selectStudentByNoAssociation" parameterType="Student" resultMap="StudentAssociation">
		select stud_id, name, email, phone, dob, a.addr_id, street, city, state, zip, country
          from students s join addresses a on s.addr_id=a.addr_id
         where stud_id = #{studId} 
	</select>
	
	<select id="selectStudentByNoWithResultMap"	parameterType="Student" resultMap="stdResult">
		select stud_id, name, email, dob, phone,
		       substring(phone, 1, 3) as f,
		       substring(phone, 5, 3) as m,
		       substring(phone, 9, 4) as l
		  from students where stud_id=#{studId};
	</select>
	
	<select id="selectStudentByNo" parameterType="Student" resultType="Student">
		<include refid="selectSQL"/>
		<include refid="whereSQL"/>
	</select>
	
	<select id="selectStudentByAll" resultType="Student">
    	<include refid="selectSQL"/>
	</select>   
	
	<select id="selectStudentByAllForResutlMap" resultMap="StudentResult">
		<include refid="selectSQL"/>
	</select>
	
	<select id="selectStudentByAllForHashMap" resultType="map">
		<include refid="selectSQL"/>
	</select>
	
	<!--  insert  -->
	<insert id="insertStudent" parameterType="Student">
		insert into students(stud_id, name, email, phone, dob) 
		values(#{studId}, #{name}, #{email}, #{phone}, #{dob})
	</insert>
	
	<insert id="insertStudentAutoInc" parameterType="Student" useGeneratedKeys="true" keyProperty="studId">
        insert into students(name, email, phone, dob) 
        values(#{name}, #{email}, #{phone}, #{dob})
    </insert>
	
	<!-- enum 타입 다루기 -->
    <insert id="insertEnumStudent" parameterType="Student">
        insert into students(stud_id, name, email,phone, dob, gender) 
        values(#{studId}, #{name}, #{email}, #{phone}, #{dob}, #{gender})
    </insert>
    
	<!-- delete -->
	<delete id="deleteStudent" parameterType="int">
		delete from students where stud_id=#{studId}
	</delete>
	
	<!-- update -->
	<update id="updateStudent" parameterType="Student">
		update students 
		   set name=#{name}, email=#{email},phone=#{phone}, dob=#{dob}
         where stud_id=#{studId}
	</update>
	
</mapper>